
# Поле для игры крестики-нолики
game_field = '''
       0  1  2
    0  -  -  -
    1  -  -  -
    2  -  -  -
'''
print('''
Крестики-нолики - логическая игра между двумя противниками на квадратном поле 3 на 3 клетки.
Один из игроков играет "КРЕСТИКАМИ", второй "НОЛИКАМИ".
''')
print(game_field)
rules = input('Нажмите Enter для загрузки правил игры.')

print('''
ВНИМАТЕЛЬНО ОЗНАКОМЬТЕСЬ С ПРАВИЛАМИ ИГРЫ!!!
* Игроки по очереди ставят на свободные клетки поля 3 х 3 знаки: один всегда "КРЕСТИКИ", другой - "НОЛИКИ".
* Первый ход делает игрок, ставящий крестики.
* Вводите координаты "КРЕСТИКОВ" и "НОЛИКОВ" по очереди через запятую без пробела:
  1-я цифра "x"- координата по горизонтали (0, 1, 2), 2-я цифра "y" - по вертикали (0, 1, 2).
* Первый выстроишвший в ряд свои фигуры по вертикали, горизонтали или диагонали - выигрывает.
* Игра завершает свою работы после определения победителя или при ничьей.
* Для досрочного выхода из игры введите "ВЫХОД"
''')
login = input('Если все понятно, нажмите Enter для авторизации игроков.')
player_cross = str(input('Введите имя или никнейм играющего "КРЕСТИКАМИ": '))
player_zero = str(input('Введите имя или никнейм играющего "НОЛИКАМИ": '))

start_game = input(f'Если {player_cross} и {player_zero} готовы, нажмите Enter для начала игры.')
print(game_field)
print('Загружено игровое поле для игры в "КРЕСТИКИ-НОЛИКИ"')

# Преобразование поля в список для работы по индексам
game_field_list = list(game_field)

# Преобразование введеных пользователем координат в индексы
data = {
    '0,0': 23, '1,0': 26, '2,0': 29,
    '0,1': 38, '1,1': 41, '2,1': 44,
    '0,2': 53, '1,2': 56, '2,2': 59
}


def check_condition():  # функция проверяет наличие выйграшной комбинации в процессе игры
    win_game = any([
        game_field_list[23] == game_field_list[26] == game_field_list[29] != '-',  # 1-я строка
        game_field_list[38] == game_field_list[41] == game_field_list[44] != '-',  # 2-я строка
        game_field_list[53] == game_field_list[56] == game_field_list[59] != '-',  # 3-я строка

        game_field_list[23] == game_field_list[38] == game_field_list[53] != '-',  # 1-й столбец
        game_field_list[26] == game_field_list[41] == game_field_list[56] != '-',  # 2-й столбец
        game_field_list[29] == game_field_list[44] == game_field_list[59] != '-',  # 3-й столбец

        game_field_list[23] == game_field_list[41] == game_field_list[59] != '-',  # 1-я диагональ
        game_field_list[29] == game_field_list[49] == game_field_list[53] != '-'   # 2-я диагональ
    ])
    return win_game  # если хотя бы одно условие/комбинация выполнена - вовращает True (функция any())


game_steps = list(data.keys())  # здесь хранятся координаты для проверки их корректности
history_steps = []  # здесь хранится история уже выборанных координат в процессе игры
stop_game = []


def cross_func():  # функция - алгоритм выбора координат для "КРЕСТИКА"
    cross = str(input(f'Игрок {player_cross} вводит координаты "КРЕСТИКА" x, y: '))
    if cross.lower() == 'выход':
        stop_game.append(cross.lower())
        return cross
    if cross in history_steps:  # проверяет есть ли выбранные координаты в истории history_steps
        print('Эти координаты уже использовались ранее!!!')
        return cross_func()  # если координаты уже были выбраны ранее - перезапускает алгоритм выбора координат
    if cross not in game_steps:
        print('Будте внимательны! Координаты введены некорректно!!!')
        return cross_func()
    history_steps.append(cross)  # запись хода (координат) игрока в историю
    game_field_list[data[cross]] = 'X'  # вставка крестика по координатам
    print(''.join(game_field_list))  # вывод игрового поля с установленным "КРЕСТИКОМ" в консоль


def zero_func():  # функция - алгоритм выбора координат для "НОЛИКА"
    zero = str(input(f'Игрок {player_zero} вводит координаты "НОЛИКА" x, y: '))
    if zero.lower() == 'выход':
        stop_game.append(zero.lower())
        return zero
    if zero in history_steps:  # проверяет есть ли выбранные координаты в истории history_steps
        print('Эти координаты уже использовались ранее!!!')
        return zero_func()  # если координаты уже были выбраны ранее - перезапускает алгоритм выбора координат
    if zero not in game_steps:
        print('Будте внимательны! Координаты введены некорректно!!!')
        return zero_func()
    history_steps.append(zero)  # запись хода (координат) игрока в историю
    game_field_list[data[zero]] = 'O'  # вставка нолика по координатам
    print(''.join(game_field_list))  # обратное преобразование списка в строку game_field


while True:  # алгорим запуска 2-х функций для начала игры
    if len(history_steps) >= 9 and (not check_condition()):  # проверка выйграшной комбинации на последнем ходе
        print('Это была напяженная игра!!!')
        print('!!!Н И Ч Ь Я!!!')
        break
    cross_func()  # запуск функции - алгоритма выбора координат для "КРЕСТИКА"
    if 'выход' in stop_game:  # выход из игры при написании "ВЫХОД" игроком ставящим "КРЕСТИК"
        print(f'Стоп игра!!!\nИгрок {player_cross} завершил игру!')
        break
    if check_condition():  # проверка выграшной сомбинации в процессе игры после установки "КРЕСТИКА"
        print(f'Игра окончена!!!\nПоздравляем!!! Игрок {player_cross} - победитель!!!')
        break
# ------------------------------------------------------------------------------------------------------------
    if len(history_steps) >= 9 and (not check_condition()):  # проверка выйграшной комбинации на последнем ходе
        print('Это была напяженная игра!!!')
        print('!!!Н И Ч Ь Я!!!')
        break
    zero_func()  # запуск функции - алгоритма выбора координат для "НОЛИКА"
    if 'выход' in stop_game:  # выход из игры при написании "ВЫХОД" игроком ставящим "НОЛИК"
        print(f'Стоп игра!!!\nИгрок {player_zero} завершил игру!')
        break
    if check_condition():  # проверка выграшной сомбинации в процессе игры после установки "НОЛИКА"
        print(f'Игра окончена!!!\nПоздравляем!!! Игрок {player_zero} - победитель!!!')
        break

